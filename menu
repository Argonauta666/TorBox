#!/bin/bash

# This file is a part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2020 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file displays the main menu and executes all relevant scripts.
#
# SYNTAX
# ./menu
#
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=14
#
# How many lines are only for decoration and spaces?
NO_SPACER=4
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_15=15
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+$NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables (don't change them - this will probably break wlan0 <-> wlan1 !!)
TORSTATS="sudo -u debian-tor nyx"
HOSTAPD="/etc/hostapd/hostapd.conf"
HOSTAPD_SAV="/etc/hostapd/hostapd.conf.tbx"
TORRC="/etc/tor/torrc"
RUNFILE="run/torbox.run"
EXITID="EXITID=0"

##############################
######## FUNCTIONS ###########

#include lib
.  lib/torbox.lib

# This function opens the ports, after a restart if bridge relay is on
check_bridge_relay()
{
  MODE_BR=$(grep "BridgeRelay" ${TORRC})
  if [ "$MODE_BR" = "BridgeRelay 1" ]; then
    ORPORT=$(grep "^ORPort" ${TORRC})
    OBFS4PORT=$(grep "^ServerTransportListenAddr" ${TORRC})
    sORPORT=$(cut -d ' ' -f2 <<< $ORPORT)
    sOBFS4PORT=$(cut -d ':' -f2 <<< $OBFS4PORT)
    (sudo iptables -C INPUT -p tcp --dport $sORPORT -j ACCEPT) 2> /dev/null
    RULE_CHECK=$?
    if [ $RULE_CHECK = 1 ]; then
      sudo iptables -A INPUT -p tcp --dport $sORPORT -j ACCEPT
      sudo iptables -A INPUT -p tcp --dport $sOBFS4PORT -j ACCEPT
    fi
  fi
}

# This function tests from where the Internet is coming
check_interface_with_internet()
{
echo -e "${RED}[+] Checking connectivity to the Internet - please wait...${NOCOLOR}"
IINTERFACE=""
IINTERFACE=$(route | grep -m 1 tun0 | tr -s " " | cut -d " " -f1)
if [ "$IINTERFACE" = "0.0.0.0" ] ; then FLASH_TUN0="<--" ; else
  IINTERFACE=$(route | grep -m 1 default | tr -s " " | cut -d " " -f8)
  if [ "$IINTERFACE" = "eth0" ] ; then FLASH_ETH0="<--" ; fi
  if [ "$IINTERFACE" = "eth1" ] ; then FLASH_ETH1="<--" ; fi
  if [ "$IINTERFACE" = "wlan0" ] ; then FLASH_WLAN0="<--" ; fi
  if [ "$IINTERFACE" = "wlan1" ] ; then FLASH_WLAN1="<--" ; fi
  if [ "$IINTERFACE" = "usb0" ] ; then FLASH_USB0="<--" ; fi
  if [ "$IINTERFACE" = "ppp0" ] ; then FLASH_USB0="<--" ; fi
fi
}

######## PREPARATIONS ########
# Resetting run-file (the initial EXITID in the runfile has to be 0)
clear
sudo sed -i "s/^EXITID=.*/${EXITID}/" ${RUNFILE}

check_bridge_relay
check_interface_with_internet
check_tor

###### DISPLAY THE MENU ######
CHOICE=$(whiptail --nocancel --title "TorBox v.0.3.2 - MAIN MENU" --menu "Choose an option (ESC -> command prompt)                      $TOR_STATUS" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
" " " " \
"  1" "Tor statistics (press m for menu / q to quit)" \
"  2" "Enforce a new exit node with a new IP" \
"  3" "Show the Tor log file - quick and dirty (press CTRL-C to leave)" \
"===" "===================================[Where is the Internet?]===" \
"  4" "Ethernet cable (eth0)                                      "$FLASH_ETH0 \
"  5" "Wireless network (through an USB adapter; wlan1)           "$FLASH_WLAN1 \
"  6" "Wireless network (through the onboard chip; wlan0)         "$FLASH_WLAN0 \
"  7" "Cellular, USB dongle or Tethering (Android) (ppp0; usb0)   "$FLASH_USB0 \
"  8" "USB ethernet adapter or Tethering (iOS) (eth1)             "$FLASH_ETH1 \
"  9" "Over a VPN connection (tun0)                               "$FLASH_TUN0 \
"===" "===============================================[Sub-Menues]===" \
" 10" "Go to the countermeasure sub-menu..." \
" 11" "Go to the configuration sub-menu..." \
" 12" "Go to defend the open internet..." \
" 13" "Go to the update and reset sub-menu..." \
"===" "========================================[Reboot & Shutdown]===" \
" 14" "Reboot / Shutdown TorBox" 3>&1 1>&2 2>&3)
exitstatus=$?

if [ $exitstatus = 0 ]; then
	if [ "$CHOICE" != " " ]; then

# This starts nyx (Tor statistics)
		if [ $CHOICE = 1 ]; then
			clear
			$TORSTATS

# This enforces a new exit node
    elif [ $CHOICE = 2 ]; then
      clear
      sudo bash new_ident

# This displays the Tor LOG file (quick and dirty)
    elif [ $CHOICE = 3 ]; then
      clear
      trap "bash menu; exit 0" SIGINT
      sudo tail -f -n 25 /var/log/tor/notices.log

# Ethernet cable internet eth0 --> wlan0 / eth1
    elif [ $CHOICE = 4 ]; then
      INPUT=$(cat text/cable-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
        echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
        echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
        echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
        echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
        echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
        echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan0 eth1) 2>/dev/null
        clear
        rm nohup.out
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        if ip link | grep wlan0 | grep "state UP" ; then
          WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth1 | grep "state UP" ; then
          ETH1_IP=$(ip addr show eth1 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN0_IP" ] && [ -n "$ETH1_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces_2 eth0 wlan0 eth1 $CAPTIVE
          finish
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
        elif [ -z "$WLAN0_IP" ] && [ -n "$ETH1_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces eth0 eth1 $CAPTIVE
          finish
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces eth0 wlan0 $CAPTIVE
          finish
          (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
        fi
      fi

# Wireless network (through an USB adapter; wlan1 --> wlan0 / eth0)
    elif [ $CHOICE = 5 ]; then
      INPUT=$(cat text/wlan1-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        if ip link | grep wlan1; then
          clear
          echo ""
          echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
          echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
          echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
          echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
          echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
          echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
          echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
          echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
          echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
          echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
          echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
          echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
          echo -e "${RED}    load the default values.${NOCOLOR}"
          echo ""
          (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
          clear
          rm nohup.out
          INPUT=$(cat text/captive_or_not-text)
          if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
            CAPTIVE=1
          else
            CAPTIVE=0
          fi
          sleep 2
          if ip link | grep wlan0 | grep "state UP" ; then
            WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
            clear
          fi
          if ip link | grep eth0 | grep "state UP" ; then
            ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
            clear
          fi
          if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces_2 wlan1 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces wlan1 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces wlan1 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          whiptail --title "TorBox - INFO" --textbox text/no_wlan1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi

# Wireless network (through the onboard chip; wlan0 --> wlan1 / eth0)
    elif [ $CHOICE = 6 ]; then
      INPUT=$(cat text/wlan0-text)
      if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        # This temporary restores the wlan1 / eth0 configuration, which does not survive a reboot!
        # A failsave routine in rc.local takes care of it!
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
        echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
        echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
        echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
        echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
        echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
        echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan1 eth0) 2>/dev/null
        clear
        rm nohup.out
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        if ip link | grep wlan1 | grep "state UP" ; then
          WLAN1_IP=$(ip addr show wlan1 | grep -w 192.168.42.1)
          clear
        fi
        if ip link | grep eth0 | grep "state UP" ; then
          ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
          clear
        fi
        if [ -n "$WLAN1_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces_2 wlan0 wlan1 eth0 $CAPTIVE
          finish
          # iptables cannot be saved !!
        elif [ -z "$WLAN1_IP" ] && [ -n "$ETH0_IP" ] ; then
          sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces wlan0 eth0 $CAPTIVE
          finish
          # iptables cannot be saved !!
        else
          sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
          sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
          sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
          sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
          sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
          sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
          # The following line should minimize those cases where a restart is required.
          sudo systemctl restart isc-dhcp-server
          sudo bash set_interfaces wlan0 wlan1 $CAPTIVE
          finish
          # iptables cannot be saved !!
        fi
      fi

# Cellular or other connections (ppp0; usb0 --> wlan0 / eth0)
    elif [ $CHOICE = 7 ]; then
      INPUT=$(cat text/ppp0-text)
      if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
        echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
        echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
        echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
        echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
        echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
        echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
        clear
        rm nohup.out
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        if ip link | grep usb0 ; then
          if ip link | grep wlan0 | grep "state UP" ; then
            WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
            clear
          fi
          if ip link | grep eth0 | grep "state UP" ; then
            ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
            clear
          fi
          if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces_2 usb0 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces usb0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces usb0 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          # pon is installed by Sixfab Shields/HATs for cellular connections software support. It is part of the ppp package, which we didn't install by default.
          sudo pon > /dev/null
          sleep 5
          if ip link | grep ppp0 > /dev/null; then
            if ip link | grep wlan0 | grep "state UP" ; then
              WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
              clear
            fi
            if ip link | grep eth0 | grep "state UP" ; then
              ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
              clear
            fi
            if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
              sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
              sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
              # The following line should minimize those cases where a restart is required.
              sudo systemctl restart isc-dhcp-server
              sudo bash set_interfaces_2 ppp0 wlan0 eth0 $CAPTIVE
              finish
              (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
            elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
              sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
              sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
              sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
              sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
              sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
              # The following line should minimize those cases where a restart is required.
              sudo systemctl restart isc-dhcp-server
              sudo bash set_interfaces ppp0 eth0 $CAPTIVE
              finish
              (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
            else
              sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
              sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
              sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
              sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
              sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
              sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
              sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
              # The following line should minimize those cases where a restart is required.
              sudo systemctl restart isc-dhcp-server
              sudo bash set_interfaces ppp0 wlan0 $CAPTIVE
              finish
              (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
            fi
          else
            whiptail --title "TorBox - INFO" --textbox text/no_ppp0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
          fi
        fi
      fi

# Tethering or USB ethernet adapter (eth1 --> wlan0 / eth0)
    elif [ $CHOICE = 8 ]; then
      INPUT=$(cat text/tethering-text)
      if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        if ip link | grep eth1 ; then
          clear
          echo ""
          echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
          echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
          echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
          echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
          echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
          echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
          echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
          echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
          echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
          echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
          echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
          echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
          echo -e "${RED}    load the default values.${NOCOLOR}"
          echo ""
          (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
          clear
          rm nohup.out
          INPUT=$(cat text/captive_or_not-text)
          if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
            CAPTIVE=1
          else
            CAPTIVE=0
          fi
          sleep 2
          if ip link | grep wlan0 | grep "state UP" ; then
            WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
            clear
          fi
          if ip link | grep eth0 | grep "state UP" ; then
            ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
            clear
          fi
          if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces_2 eth1 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces eth1 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces eth1 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          whiptail --title "TorBox - INFO" --textbox text/no_eth1-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi

# Over a VPN connection (tun0)
    elif [ $CHOICE = 9 ]; then
      INPUT=$(cat text/tun0-text)
      if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        clear
        echo ""
        echo -e "${WHITE}[!] IMPORTANT${NOCOLOR}"
        echo -e "${RED}[+] We possibly have to reconfigure TorBox's network settings!${NOCOLOR}"
        echo -e "${RED}[+] Usually, the configuration continuous afterward -- however,${NOCOLOR}"
        echo -e "${RED}    this can take up to two minutes.${NOCOLOR}"
        echo -e "${RED}[+] If it doesn't, please DON'T CLOSE your ssh program, but${NOCOLOR}"
        echo -e "${RED}    disconnect and reconnect your client device from TorBox's WLAN${NOCOLOR}"
        echo -e "${RED}    until the client gets a valid IP address (192.168.42.* or${NOCOLOR}"
        echo -e "${RED}    192.168.43.*). After waiting a little bit longer, you should${NOCOLOR}"
        echo -e "${RED}    see TorBox's configuration dialogue in the SSH program again.${NOCOLOR}"
        echo -e "${RED}[+] Was it not successful? You may have to choose the Internet${NOCOLOR}"
        echo -e "${RED}    source again (main menu 4-9)${NOCOLOR}"
        echo -e "${RED}[+] Locked out? In this case, restart TorBox -- this should automatically${NOCOLOR}"
        echo -e "${RED}    load the default values.${NOCOLOR}"
        echo ""
        (nohup ./hostapd_fallback_komplex wlan0 eth0) 2>/dev/null
        clear
        rm nohup.out
        INPUT=$(cat text/captive_or_not-text)
        if (whiptail --title "TorBox - INFO" --no-button "OPEN ACCESS" --yes-button "CAPTIVE PORTAL" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
          CAPTIVE=1
        else
          CAPTIVE=0
        fi
        sleep 2
        tun0up=$(ip link | grep tun0)
        if [ "$tun0up" = "" ] ; then
          readarray -t ovpnlist < <(ls -1X ../openvpn/*.ovpn | sed "s/..\/openvpn\///" | sed "s/.ovpn//")
          if [ "${ovpnlist[0]}" = "" ] ; then
            whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
            trap "bash menu; exit 0" EXIT
            exit 0
          fi
          ovpnlist_anzahl=${#ovpnlist[*]}
          anzahl_loops=$(( $ovpnlist_anzahl - 1 ))
          menu_content=""
          for (( i=0; i<=$anzahl_loops; i++ ))
          do
            menu_item=$(( $i + 1 ))
            menu_content="$menu_content${RED}$menu_item${NOCOLOR} - ${ovpnlist[$i]}\n"
          done
          clear
          echo -e "${WHITE}Choose an OpenVPN configuration${NOCOLOR}"
          echo ""
          echo -e "$menu_content"
          echo ""
          read -r -p $'\e[1;37mWhich OpenVPN configuration would you like to use? -> \e[0m'
          echo
          if [[ $REPLY =~ ^[1234567890]$ ]] ; then
            CHOICE_OVPN=$(( $REPLY - 1 ))
            clear
            echo -e "${RED}[+] Connecting OpenVPN server...${NOCOLOR}"
            echo ""
            ovpn_file=../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
            sudo sed -i "s/^dev tun.*/dev tun0/" ${ovpn_file}
            sudo openvpn --daemon --config ../openvpn/${ovpnlist[$CHOICE_OVPN]}.ovpn
            echo ""
            echo -e "${RED}[+] Please wait, we need 15 second to configure the interface...${NOCOLOR}"
            sleep 15
            tun0up=$(ip link | grep tun0)
          else
            trap "bash menu; exit 0" EXIT
            exit 0
          fi
        fi
        if [ "$tun0up" != "" ] ; then
          clear
          echo -e "${RED}[+] Checking DNS...${NOCOLOR}"
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo -e "${RED}[+] Yes, DNS seems to work! :-)${NOCOLOR}"
          else
            echo -e "${WHITE}[!] DNS doesn't seem to work :-(${NOCOLOR}"
            echo -e "${RED}[+] We will add a bunch of public nameservers to /etc/resolv.conf and try again...${NOCOLOR}"
            echo -e "${RED}[+] This nameservers are only used for local resolution. All clients DNS resquest are handled through Tor.${NOCOLOR}"
            sudo cp /etc/resolv.conf /etc/resolv.conf.bak
            (sudo resolvconf -a tun0 <etc/resolv.conf) 2> /dev/null
            sleep 2
          fi
          if ip link | grep wlan0 | grep "state UP" ; then
            WLAN0_IP=$(ip addr show wlan0 | grep -w 192.168.42.1)
            clear
          fi
          if ip link | grep eth0 | grep "state UP" ; then
            ETH0_IP=$(ip addr show eth0 | grep -w 192.168.43.1)
            clear
          fi
          if [ -n "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces_2 tun0 wlan0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          elif [ -z "$WLAN0_IP" ] && [ -n "$ETH0_IP" ] ; then
            sudo sed -i "s/^TransPort 192.168.42.1:9040/#TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.42.1:9053/#DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9050/#SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.42.1:9051/#SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^#TransPort 192.168.43.1:9040/TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.43.1:9053/DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9050/SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.43.1:9051/SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces tun0 eth0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          else
            sudo sed -i "s/^#TransPort 192.168.42.1:9040/TransPort 192.168.42.1:9040/" ${TORRC}
            sudo sed -i "s/^#DNSPort 192.168.42.1:9053/DNSPort 192.168.42.1:9053/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9050/SocksPort 192.168.42.1:9050/" ${TORRC}
            sudo sed -i "s/^#SocksPort 192.168.42.1:9051/SocksPort 192.168.42.1:9051/" ${TORRC}
            sudo sed -i "s/^TransPort 192.168.43.1:9040/#TransPort 192.168.43.1:9040/" ${TORRC}
            sudo sed -i "s/^DNSPort 192.168.43.1:9053/#DNSPort 192.168.43.1:9053/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9050/#SocksPort 192.168.43.1:9050/" ${TORRC}
            sudo sed -i "s/^SocksPort 192.168.43.1:9051/#SocksPort 192.168.43.1:9051/" ${TORRC}
            # The following line should minimize those cases where a restart is required.
            sudo systemctl restart isc-dhcp-server
            sudo bash set_interfaces tun0 wlan0 $CAPTIVE
            finish
            (sudo sh -c "iptables-save > /etc/iptables.ipv4.nat") 2> /dev/null
          fi
        else
          whiptail --title "TorBox - INFO" --textbox text/no_tun0-text $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
        fi
      fi

# Sub-menues
    elif [ $CHOICE = 10 ]; then
      bash menu-bridges
    elif [ $CHOICE = 11 ]; then
      bash menu-config
    elif [ $CHOICE = 12 ]; then
      bash menu-server
    elif [ $CHOICE = 13 ]; then
      screen bash update
      clear
      cd
      cd torbox

# Reboot or Shotdown TorBox
    elif [ $CHOICE = 14 ]; then
      CHOICE_EXIT=$(whiptail --nocancel --title "TorBox v.0.3.2 - EXIT MENU" --menu "Reboot or Shutdown (ESC to quit)" 10 $MENU_WIDTH_REDUX 2 \
      "  1" "REBOOT   TorBox" \
      "  2" "SHUTDOWN TorBox" 3>&1 1>&2 2>&3)
      exitstatus=$?

      if [ $exitstatus = 0 ]; then
        if [ "$CHOICE_EXIT" != " " ]; then
          if [ $CHOICE_EXIT = 1 ]; then
            clear
            echo -e "${RED}[+] Rebooting TorBox...${NOCOLOR}"
            echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
            echo ""
            sleep 2
            sudo reboot
            exit 0
          elif [ $CHOICE_EXIT = 2 ]; then
            clear
            echo -e "${RED}[+] Shutting down TorBox...${NOCOLOR}"
            echo -e "${WHITE}[!] If you have activated Bridges or Bridge Relay, these services will be reactivated automatically after the restart.${NOCOLOR}"
            echo -e "${WHITE}[!] You can disconnect TorBox from the power source in about 30 second...${NOCOLOR}"
            echo ""
            sleep 2
            sudo shutdown -h now
            exit 0
          fi
        fi
      fi
    fi
  fi
else
 clear
	PROMPTTEXT=$(cat text/prompt-text)
	echo -e "$PROMPTTEXT"
	echo " "
	exit 0
fi
bash menu
